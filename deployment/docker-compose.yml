version: '3'

services:

  kafka01:
    image: 'bitnami/kafka:3.5.1'
    container_name: kafka01
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka01:9093,1@kafka02:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=INTERNAL://:9091,EXTERNAL://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka01:9091,EXTERNAL://localhost:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    ports:
      - "9092:9092"
    networks:
      - local
    volumes:
      - 'kafka01_data:/bitnami/kafka'

  kafka02:
    image: 'bitnami/kafka:3.5.1'
    container_name: kafka02
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka01:9093,1@kafka02:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=INTERNAL://:9091,EXTERNAL://:9192,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka02:9091,EXTERNAL://localhost:9192
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    ports:
      - "9192:9192"
    networks:
      - local
    volumes:
      - 'kafka02_data:/bitnami/kafka'


#  kafka-ui:
#    image: provectuslabs/kafka-ui:v0.7.1
#    container_name: kafka_ui
#    depends_on:
#      - kafka01
#      - kafka02
#    ports:
#      - "8080:8080"
#    environment:
#      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka01:9091,kafka02:9091
#      - KAFKA_CLUSTERS_0_NAME=kraft
#    networks:
#      - local

  pgsql01:
    build:
      context: ../
      dockerfile: ./deployment/pgsql/Dockerfile
    container_name: pgsql01
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 15
    ports:
      - "5433:5432"
    volumes:
      - 'pgsql01_data:/var/lib/postgresql/data'
    networks:
      - local


  orderservice:
    build:
      context: ../
      dockerfile: ./deployment/orderservice/Dockerfile
    container_name: orderservice
    depends_on:
      pgsql01:
        condition: service_healthy
    restart: always
    tty: true
    stdin_open: true
    ports:
      - "8281:8281"
    networks:
      - local

  orderflow:
    build:
      context: ../
      dockerfile: ./deployment/orderflow/Dockerfile
    container_name: orderflow
    depends_on:
      pgsql01:
        condition: service_healthy
    restart: always
    tty: true
    stdin_open: true
    ports:
      - "8282:8282"
    networks:
      - local

  warehouse:
    build:
      context: ../
      dockerfile: ./deployment/warehouse/Dockerfile
    container_name: warehouse
    depends_on:
      pgsql01:
        condition: service_healthy
    restart: always
    tty: true
    stdin_open: true
    ports:
      - "8283:8283"
    networks:
      - local

  payment:
    build:
      context: ../
      dockerfile: ./deployment/payment/Dockerfile
    container_name: payment
    depends_on:
      pgsql01:
        condition: service_healthy
    restart: always
    tty: true
    stdin_open: true
    ports:
      - "8284:8284"
    networks:
      - local

  notification:
    build:
      context: ../
      dockerfile: ./deployment/notification/Dockerfile
    container_name: notification
    depends_on:
      pgsql01:
        condition: service_healthy
    restart: always
    tty: true
    stdin_open: true
    ports:
      - "8285:8285"
    networks:
      - local


volumes:
  kafka01_data:
    driver: local
  kafka02_data:
    driver: local
  pgsql01_data:
    driver: local

networks:
  local: